<!DOCTYPE html>
<meta name="robots" content="noindex">
<html>
<head>
<meta charset=" utf-8">
<meta name="author" content="http://www.softwhy.com/" />
<script src="https://code.jquery.com/jquery-3.1.0.js"></script>
  
  <style>
	.map-Main {
		border-width:1px;
		border-style:solid;
		border-color:#222222;
		padding:3px;
		border-collapse: collapse;
	}
	.mapTd {
		width: 20px;
		height: 20px;
	}
	.SelectedTd {
		border-style: solid dashed;
		border-style:solid;
		opacity: 0.5; 
		filter:Alpha(Opacity=50, Style=0);
	}

.tooltip{
        position:absolute;
        border:1px solid #333;
        background:#ffffff;
        padding:10px;
        color:#333;
		display:none;
		border-radius:5px;
		
}	
  </style>
  
</head>
<body>
<div>回合：<span id="stepNum"></div>
<div>行動力：<span id="activeNum"></span></div>
<div><button id="nextStep">下回合</button></div>
<br>
<div id="map"></div>
<div class="tooltip" id="selColumnWin">
	<button id="fight">fight</button><br><br>
	<button id="close">close</button>
</div>
<script>

//地圖
var map = new MapView($('#map'))
	.row(10)
	.cell(10)
	.powerNumber(2)
	.draw()	
	;

//觸發
Event(map.objAry);

	
function Event(dataArray) {

	var WIN = 11,
		LOSE = -11,
		DRAW = 10,
		ACTIVE_NUM = 5;//預設行動力
		
	var $selectedTd,
		$oppoSelectedTd,//對手選擇
		globalData = {},
		activeNum = ACTIVE_NUM,//行動力
		stepNum = 1; //回合
	
	//顯示行動力
	activeShow();
	$('#stepNum').html(stepNum);
	function activeShow() {
		$('#activeNum').html(activeNum);
	}
	
	//下一回合
	$('#nextStep').click(function() {
		stepNum++;
		$('#stepNum').html(stepNum);
		activeNum = ACTIVE_NUM;
		activeShow();
		console.log(dataArray);
		//所有格子+1
		for(var r = 0; r < dataArray.length; r++) {
			for(var c = 0; c < dataArray[r].length; c++) {
				var data = dataArray[r][c],
					power = data['power'];
				if(power['no'] == -1) {
					continue;
				}
				if(data[value] < 10) {
					data[value] += 1;
				}
				
				data['mapObj'].html(data[value]);	
			}
		}		
		
		//ai行動
		//ai()
	});

	//設定event
	var r = 0, c = 0;
	for(r = 0; r < dataArray.length; r++) {
		for(c = 0; c < dataArray[r].length; c++) {
			var data = dataArray[r][c],
				$td = data['mapObj'];
			$td.data('dd', data);
			$td.click(function() {
				selectTd($(this));

			});
		}
	}
	//關視窗
	$('#selColumnWin').find('#close').click(function(){
		$('#selColumnWin').hide();
	});
	//打架
	$('#selColumnWin').find('#fight').click(function(){
		if(activeNum >= 0) {
			activeNum--;
			fight();
			activeShow();
		}
		$('#selColumnWin').hide();
	});
	
	function fight() {
		var oppoData = $oppoSelectedTd.data('dd'),
			oppoPower = oppoData['power'],
			selfData = $selectedTd.data('dd'),
			selfPower = selfData['power'];
		var c = compare(selfPower['value'], oppoPower['value'])
		if(c === WIN) {
			if(selfPower['value'] > 1) {
				selfPower['value'] -= oppoPower['value'];
			}
			if(selfPower['value'] <= 0) {
				selfPower['value'] = 1;
			}
			if(oppoPower['value'] == 0) {
				oppoPower['value'] = selfPower['value'] == 1 ? 1 : Math.floor(selfPower['value']/2);
				selfPower['value'] = oppoPower['value'];
			}
			
			
			oppoPower['color'] = selfPower['color'];
			oppoPower['no'] = selfPower['no'];
			oppoPower['self'] = selfPower['self'];
			$oppoSelectedTd.css({
				'backgroundColor' : selfPower['color'],
				'color': '#ffffff'
			})
			console.log('WIN');
			reflashValue();
		}
		
		else if(c === LOSE) {
			
			if(selfPower['value'] == 1) {
				selfPower['value'] = 0;
			}
			else {
				selfPower['value'] -= oppoPower['value'];
				if(selfPower['value'] <= 0) {
					selfPower['value'] = 1;
				}
			}
			if(oppoPower['value'] > 1) {
				oppoPower['value'] -= 1;
			}
			
			console.log('LOSE');
			reflashValue();
		}
		else {
			if(selfPower['value'] > 1) {
				selfPower['value'] -= 1;
			}
			if(oppoPower['value'] > 1) {
				oppoPower['value'] -= 1;
			}
			
			console.log('DRAW');
			reflashValue();
		}
		
	}
	function reflashValue() {
	
		var oppoData = $oppoSelectedTd.data('dd'),
			oppoPower = oppoData['power'],
			selfData = $selectedTd.data('dd'),
			selfPower = selfData['power'],
			oppoValue = oppoPower['value'],
			selfValue = selfPower['value'],
			emptyColor= '#ffffff',
			emptyTdCss = {
				'backgroundColor' : emptyColor,
				'color': '#000000' 
			};
			
		if(selfValue === 0) {
			selfPower['color'] = emptyColor;
			selfPower['no'] = -1;
			selfPower['self'] = false;
			$selectedTd.css(emptyTdCss)		
		}
		
		if(oppoValue === 0) {
			oppoPower['color'] = emptyColor;
			oppoPower['no'] = -1;
			oppoPower['self'] = false;
			$oppoSelectedTd.css(emptyTdCss)		
		}
		
		$selectedTd.html(selfValue);
		$oppoSelectedTd.html(oppoValue);
	}

	//點選格子
	function selectTd($this) {
		var selfData = $this.data('dd'),
			power = selfData['power'],
			row = selfData['row'],
			cell = selfData['cell'];
		
		if(power['self']) {
			if($selectedTd) {
				$selectedTd.removeClass('SelectedTd')
				$selectedTd = null;
			}
			$this.addClass('SelectedTd')
			$selectedTd = $this;
		}
		else {
			//回合結束不可行動
			if(activeNum <= 0) {
				return;
			}		
			if($selectedTd) {
				var selectedData = $selectedTd.data('dd');
				openTooltie($this, selfData, selectedData)
			}
			
		}
	}
	//開窗
	function openTooltie($this, selfData, selectedData) {
		if(!isSelectedNear(selfData, selectedData)) {
			$('#selColumnWin').hide();
			return;
		}
		//選擇到則記錄
		$oppoSelectedTd = $this;

		var offset = $this.offset(),
			width = $this.width(),
			height = $this.height();
			$('#selColumnWin').show()
				.css({
					'top': (offset.top + height) + "px",
					'left': (offset.left+ width*0.5) + "px"
				});		
	}
	//是否選到遴居
	function isSelectedNear(selfData, selectedData) {
		var power = selfData['power'],
			selectedPower = selectedData['power'],
			selfR = selfData['row'],
			selfC = selfData['cell'],
			pR = selectedData['row'],
			pC = selectedData['cell'],
			count = 0;
		if(selfR-1 == pR && selfC == pC) {
			count++;
		}
		if(selfR+1 == pR && selfC == pC) {
			count++;
		}
		if(selfR == pR && selfC+1 == pC) {
			count++;
		}
		if(selfR == pR && selfC-1 == pC) {
			count++;
		}
		return count;
	}
	
	
	//比較
	function compare(s, o) {
		var sc = s * 10;//自己的勝率
		var oc = o * 10;//對方的勝率
		var m = oc - 5;//平手機率拉低一點
		m = m == 0 ? 0 : m;
		if(s == o) {
			m = sc;
		}
		if(s == 0 || o == 0) {
			m = 0;
		}
		var sum = sc + oc + m;

		var value = getRandomInt(1, sum);

		if(value >= 1 && value <= sc) {
			return WIN;
		}
		else if (value >= sc && value <= sc+oc)
		{
			return LOSE;
		}

		return DRAW;	
	}
	
	
	function getRandomInt(min, max) {
		return Math.floor(Math.random() * (max - min + 1)) + min;
	}
}

//繪基本地圖
function MapView($map) {
	var that = this,
		_row = 10,
		_cell = 10,
		_powers = 2,
		_maze = {},
		dataArray = [],
		powers = {},
		colors=[
			'red',
			'blue',
			'#AAAAAA',
			'green',
			'#000000'
		];
	
	this.mazeBulider = function(maze) {
		_maze = maze;
		return that;
	};
	
	this.row = function(row) {
		_row = row;
		return that;
	}
	this.cell = function(cell) {
		_cell = cell;
		return that;
	}
	
	
	this.objAry = dataArray;
	
	this.powerNumber = function(powerNum) {
		var powerMapNum = (_row + _cell) / 2,
			i = 0,
			startRC = [
				[0,0],
				[_row-1,_cell-1],
				[0,_cell-1],
				[_row-1,0]
			];//勢力格子
		
		//初始化所有格子
		
		for(r = 0; r < _row; r++) {
			for(c = 0; c < _cell; c++) {
				powers[r+','+c] = {
						'powerMapNum': 0,
						'color' : '#ffffff',
						'valueColor': '#000000',
						'no' : -1,
						'self': false,
						'value': 0
						//'r': r,
						//'c': c
					};	
			}
		}
		
		//設定勢力
		for(i = 0; i < powerNum; i++) {
			var r = startRC[i][0],
				c = startRC[i][1],
				initPos = getAllInitPos(r, c, powerMapNum);
				$.each(initPos, function(idx, item) {
					var r = item[0],
						c = item[1];
				powers[r+','+c] = {
						'powerMapNum': powerMapNum,
						'color' : colors[i],
						'valueColor': '#ffffff',
						'no' : i,
						'self': i==0,
						'value': 10
						//'r': r,
						//'c': c
					};					
				});			
			
	
		}
		return that;
		
		function getAllInitPos(r, c, count) {
			var poss = [
					[r,c]
				],
				addR = r+1 >= _row? -1 : 1,
				addC = c+1 >= _cell? -1 : 1,
				posIdx = 0,
				nowPos = poss[posIdx],
				cnt = 1;
				
				
			for(var i = 0; i < count-1; i++) {
				var rr = nowPos[0],
					cc = nowPos[1];
				if(cnt > 1 && cnt % 2 == 0) {
					rr += addR;
					posIdx++;
					nowPos = poss[posIdx];
				}
				else {
					cc += addC;
				}
				
				cnt++;
				poss.push([rr,cc])
			}
			return poss;
		}
	}
	
	this.draw = function() {
		var r = 0,
			c = 0,
			$table = $('<table class="map-Main"></table>');
		for(r = 0; r < _row; r++) {
			var $tr = $('<tr class="map-Main"></tr>'),
				row = [];
			for(c = 0; c < _cell; c++) {
				var $td = $('<td></td>')
							.prop({
								'align': 'center',
								'valign': 'center',
								'class': 'map-Main mapTd',
								'id': r+','+c
							});
				$tr.append($td);
				row.push({
					'mapObj': $td,
					'row': r,
					'cell': c,
					'power': powers[r+','+c]
				});
			}
			$table.append($tr);
			dataArray.push(row);
		}
		$map.append($table);
		setPowerToMap();
		return that;
	};
	
	//設定格子至map
	function setPowerToMap() {
		for(var r = 0; r < _row; r++) {
			for(var c = 0; c < _cell; c++) {
				var power = powers[r+','+c];
				if(!power) {
					continue;
				}
				value = power['value'];
				var data = dataArray[r][c],
					$td = data['mapObj'];
				$td.css(
					{
						'backgroundColor' : power['color'],
						'color' : power['valueColor']
					}).html(value);	
			}
		}
	}
	

	
	return this;
}
</script>
</body>
</html>
